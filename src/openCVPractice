import cv2
import numpy as np

# # This captures a webcame video, and changes the resolution of the image based on the seetings in .set
# # video = cv2.VideoCapture(0)
# # video.set(3,640)
# # video.set(4,480)
# # video.set(10,100)
# # while True:
# #     success,img = video.read()
# #     cv2.imshow("Video", img)
# #     if cv2.waitKey(1) & 0xFF == ord('q'):
# #         break

# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # #Part 2
# # kernal = np.ones((5,5),np.uint8)
# # # image = cv2.imread("CS4980/roc_curve_blackjack.png")
# # # imageGray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
# # # imageBlur = cv2.GaussianBlur(imageGray,(7,7),0)
# # # imageCanny = cv2.Canny(image,200,200)
# # # imageDialation = cv2.dilate(imageCanny,kernal, iterations = 1)
# # # imageEroded = cv2.erode(imageDialation, kernal, iterations=1)
# # # cv2.imshow("Edges Image", imageCanny)
# # # cv2.imshow("Dialation Image", imageDialation)
# # # cv2.imshow("Eroded Image", imageEroded)

# # # cv2.waitKey(0)
# # #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # #Part 3
# # img = cv2.imread("CS4980/DisneyFiguresTesting.webp")

# # #imgResize = cv2.resize(img,(3000,2000))
# # imgCropped = img[0:200,200:500]

# # #cv2.imshow("test image",img)
# # #cv2.imshow("test image",imgResize)
# # #cv2.imshow("cropped",imgCropped)

# # cv2.waitKey(0)
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# # #Part 4

# # img = np.zeros((512,512,3))

# # #print(img.shape)

# # #img[200:300,100:300] = 255,0,0

# # cv2.line(img,(0,0),(img.shape[1],img.shape[0]),(0,255,0),3)
# # cv2.rectangle(img,(0,0),(250,350),(0,0,255),cv2.FILLED)
# # cv2.circle(img,(400,50),30,(255,255,0),5)

# # cv2.putText(img,"Open Cv2 Practice",(100,100),cv2.FONT_HERSHEY_COMPLEX,1,(0,150,0),1)

# # cv2.imshow("image",img)


# # cv2.waitKey(0)
# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# #PART 5

# # img = cv2.imread("CS4980/DisneyFiguresTesting.webp")

# # width,height = 250,350

# # pts1 = np.float32([[111,219],[287,188],[154,482],[352,440]])

# # pts2 = np.float32([[0,0],[width,0],[0,height],[width,height]])

# # matrix = cv2.getPerspectiveTransform(pts1,pts2)

# # imgOutput = cv2.warpPerspective(img,matrix,(width,height))

# # cv2.imshow("Image",imgOutput)

# # cv2.waitKey(0)

# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# # #Part 6

# # img = cv2.imread("CS4980/DisneyFiguresTesting.webp")

# # # imgHor = np.hstack((img,img))
# # # imgVert = np.vstack((img,img))

# # # cv2.imshow("Horizontal",imgHor)
# # # cv2.imshow("Vertical",imgVert)
# # cv2.waitKey(0)

# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# #Part 7
# def empty(a):
#     pass
# img = cv2.imread("CS4980/DisneyFiguresTesting.webp")

# cv2.namedWindow("TrackBar")
# cv2.createTrackbar("Hue Min","TrackBar",0,179,empty)

# imgHSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
# cv2.imshow("oringal",img)
# cv2.imshow("HSV",imgHSV)
# cv2.waitKey(0)

# imgHSV = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Part 8

def getContours(img):
    
    path = 'CS4980/CharacterTest2.jpg'
    imgContour = cv2.imread(path)
    contours, hierarchy = cv2.findContours(img,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)
    for cnt in contours:
        area = cv2.contourArea(cnt)
        print(area)
        cv2.drawContours(imgContour,cnt,-1,(255,0,0),3)
        peri = cv2.arcLength(cnt,True)
        print (peri)
        approx = cv2.approxPolyDP(cnt,0.02*peri,True)
        print(len(approx))
        objCor = len(approx)
        x,y ,w ,h = cv2.boundingRect(approx)
        
        cv2.rectangle(imgContour,(x,y),(x+w,y+h),(0,255,0),2)
    cv2.imshow("Contours",imgContour)
    cv2.waitKey(0)
    return

path = 'CS4980/CharacterTest2.jpg'
img = cv2.imread(path)
print(img)
imgContour = cv2.imread(path)
imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
imgBlur = cv2.GaussianBlur(imgGray,(7,7),1)
imgCanny = cv2.Canny(imgBlur,50,50)
getContours(imgCanny)
imgBlank = np.zeros_like(img)

cv2.imshow("Orignal",img)
#cv2.imshow("ImgG",imgGray)
#cv2.imshow("ImgB",imgBlur)
cv2.waitKey(0)